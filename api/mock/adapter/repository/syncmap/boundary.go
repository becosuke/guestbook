// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapter/repository/syncmap/boundary.go

// Package mock_syncmap is a generated GoMock package.
package mock_syncmap

import (
	reflect "reflect"

	post "github.com/becosuke/guestbook/api/internal/domain/post"
	syncmap "github.com/becosuke/guestbook/api/internal/driver/syncmap"
	gomock "github.com/golang/mock/gomock"
)

// MockBoundary is a mock of Boundary interface.
type MockBoundary struct {
	ctrl     *gomock.Controller
	recorder *MockBoundaryMockRecorder
}

// MockBoundaryMockRecorder is the mock recorder for MockBoundary.
type MockBoundaryMockRecorder struct {
	mock *MockBoundary
}

// NewMockBoundary creates a new mock instance.
func NewMockBoundary(ctrl *gomock.Controller) *MockBoundary {
	mock := &MockBoundary{ctrl: ctrl}
	mock.recorder = &MockBoundaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBoundary) EXPECT() *MockBoundaryMockRecorder {
	return m.recorder
}

// ToEntity mocks base method.
func (m *MockBoundary) ToEntity(message *syncmap.Message) *post.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToEntity", message)
	ret0, _ := ret[0].(*post.Post)
	return ret0
}

// ToEntity indicates an expected call of ToEntity.
func (mr *MockBoundaryMockRecorder) ToEntity(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToEntity", reflect.TypeOf((*MockBoundary)(nil).ToEntity), message)
}

// ToMessage mocks base method.
func (m *MockBoundary) ToMessage(entity *post.Post) *syncmap.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMessage", entity)
	ret0, _ := ret[0].(*syncmap.Message)
	return ret0
}

// ToMessage indicates an expected call of ToMessage.
func (mr *MockBoundaryMockRecorder) ToMessage(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMessage", reflect.TypeOf((*MockBoundary)(nil).ToMessage), entity)
}
