// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/becosuke/guestbook/api/internal/adapter/controller"
	"github.com/becosuke/guestbook/api/internal/adapter/repository/generator"
	syncmap2 "github.com/becosuke/guestbook/api/internal/adapter/repository/syncmap"
	"github.com/becosuke/guestbook/api/internal/application/interactor"
	"github.com/becosuke/guestbook/api/internal/driver/grpcserver"
	"github.com/becosuke/guestbook/api/internal/driver/interceptor"
	"github.com/becosuke/guestbook/api/internal/pkg/config"
	"github.com/becosuke/guestbook/api/internal/pkg/logger"
	"github.com/becosuke/guestbook/api/internal/pkg/pb"
	"github.com/becosuke/syncmap"
	"github.com/google/wire"
	"go.uber.org/zap"
	"google.golang.org/grpc"
)

// Injectors from wire.go:

func InitializeApp(ctx context.Context) *App {
	configConfig := config.NewConfig(ctx)
	zapLogger := logger.NewLogger(ctx, configConfig)
	authFunc := interceptor.NewAuthFunc(ctx)
	server := grpcserver.NewGrpcServer(ctx, zapLogger, authFunc)
	syncmapSyncmap := syncmap.NewSyncmap()
	querier := syncmap2.NewQuerier(configConfig, zapLogger, syncmapSyncmap)
	repositoryGenerator := generator.NewGenerator()
	commander := syncmap2.NewCommander(configConfig, zapLogger, syncmapSyncmap, repositoryGenerator)
	usecase := interactor.NewUsecase(configConfig, zapLogger, querier, commander)
	guestbookServiceServer := controller.NewGuestbookServiceServer(configConfig, zapLogger, usecase)
	app := &App{
		Config:     configConfig,
		Logger:     zapLogger,
		GrpcServer: server,
		Controller: guestbookServiceServer,
	}
	return app
}

// wire.go:

type App struct {
	Config     *config.Config
	Logger     *zap.Logger
	GrpcServer *grpc.Server
	Controller pb.GuestbookServiceServer
}

var controllerSet = wire.NewSet(controller.NewGuestbookServiceServer)

var usecaseSet = wire.NewSet(interactor.NewUsecase)

var repositorySet = wire.NewSet(generator.NewGenerator, syncmap2.NewQuerier, syncmap2.NewCommander)
