// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package grpc

import (
	"context"
	"github.com/becosuke/guestbook/api/internal/adapter/controller"
	syncmap2 "github.com/becosuke/guestbook/api/internal/adapter/repository/syncmap"
	"github.com/becosuke/guestbook/api/internal/application/usecase"
	"github.com/becosuke/guestbook/api/internal/driver/grpcserver"
	"github.com/becosuke/guestbook/api/internal/driver/syncmap"
	"github.com/becosuke/guestbook/api/internal/registry/config"
	"github.com/becosuke/guestbook/api/internal/registry/injection"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeApp(ctx context.Context) *App {
	configConfig := config.NewConfig(ctx)
	logger := injection.ProvideLogger(ctx, configConfig)
	authFunc := injection.ProvideAuthFunc(ctx)
	server := grpcserver.NewGrpcServer(ctx, logger, authFunc)
	syncmapSyncmap := syncmap.NewSyncmap()
	boundary := syncmap2.NewBoundary()
	querier := syncmap2.NewQuerier(configConfig, syncmapSyncmap, boundary)
	generator := syncmap2.NewGenerator()
	commander := syncmap2.NewCommander(configConfig, syncmapSyncmap, boundary, generator)
	usecaseUsecase := usecase.NewUsecase(configConfig, querier, commander)
	controllerBoundary := controller.NewBoundary()
	guestbookServiceServer := controller.NewGuestbookServiceServer(configConfig, logger, usecaseUsecase, controllerBoundary)
	app := &App{
		Config:     configConfig,
		Logger:     logger,
		GrpcServer: server,
		Controller: guestbookServiceServer,
	}
	return app
}

// wire.go:

var controllerSet = wire.NewSet(controller.NewGuestbookServiceServer, controller.NewBoundary)

var usecaseSet = wire.NewSet(usecase.NewUsecase)

var repositorySet = wire.NewSet(syncmap2.NewGenerator, syncmap2.NewQuerier, syncmap2.NewCommander, syncmap2.NewBoundary)

var driverSet = wire.NewSet(syncmap.NewSyncmap)
